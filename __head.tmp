<!doctype html>
<html lang="ja">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>呼吸ペーサー v1.0 (検証用)</title>
  <style>
    :root {
      --bg: #0c0f12;
      --fg: #e6eef7;
      --muted: #9fb3c8;
      --accent: #60a5fa;
      --accent2: #34d399;
      --danger: #ef4444;
      --panel: #131820;
      --panel-border: #1f2937;
      --hi-contrast-bg: #000;
      --hi-contrast-fg: #fff;
    }
    html, body {
      margin: 0;
      height: 100%;
      background: var(--bg);
      color: var(--fg);
      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, "Hiragino Kaku Gothic ProN", Meiryo, sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      overflow: hidden;
    }
    .app {
      display: grid;
      grid-template-rows: auto 1fr auto;
      height: 100vh;
    }
    header, footer {
      padding: 8px 12px;
      background: var(--panel);
      border-bottom: 1px solid var(--panel-border);
    }
    header h1 {
      font-size: 16px;
      margin: 0;
      font-weight: 600;
    }
    .main {
      display: grid;
      grid-template-columns: 1fr 360px;
      gap: 0;
      height: calc(100vh - 96px);
    }
    .canvas-wrap {
      position: relative;
      background: radial-gradient(1200px 1200px at 50% 45%, #0f172a 0%, #0c0f12 60%, #0a0d10 100%);
    }
    canvas {
      display: block;
      width: 100%;
      height: 100%;
    }
    .controls {
      background: var(--panel);
      border-left: 1px solid var(--panel-border);
      padding: 12px;
      overflow-y: auto;
    }
    .row {
      display: flex;
      gap: 8px;
      margin: 6px 0 10px;
      flex-wrap: wrap;
    }
    .row > * { flex: 1; }
    .buttons .btn {
      flex: 1 1 auto;
      padding: 10px 12px;
      border-radius: 10px;
      border: 1px solid var(--panel-border);
      background: #0f172a;
      color: var(--fg);
      cursor: pointer;
      font-weight: 600;
    }
    .btn.primary { background: linear-gradient(180deg, #2563eb, #1d4ed8); border-color: #1e40af; }
    .btn.warn { background: linear-gradient(180deg, #ef4444, #dc2626); border-color: #991b1b; }
    .btn.ghost { background: #0b1220; }
    .btn.toggled { outline: 2px solid var(--accent2); }
    .btn:disabled { opacity: 0.5; cursor: not-allowed; }
    .group { border: 1px solid var(--panel-border); padding: 10px; border-radius: 12px; margin-bottom: 10px; background: #0d1422; }
    .group h3 { font-size: 13px; margin: 0 0 6px; color: var(--muted); }
    label { font-size: 12px; color: var(--muted); display: block; margin-bottom: 4px; }
    input[type="range"] { width: 100%; }
    .kv { display: grid; grid-template-columns: auto 1fr; gap: 6px 10px; font-size: 12px; }
    .kv div:nth-child(odd) { color: var(--muted); }
    .hint { font-size: 12px; color: var(--muted); }
    .status { font-variant-numeric: tabular-nums; }
    .footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 8px;
    }
    .link { color: var(--accent); cursor: pointer; text-decoration: underline; }
    .fullscreen .controls { display: none; }
    .fullscreen .main { grid-template-columns: 1fr; }
    .fullscreen header, .fullscreen footer { background: transparent; border: 0; }
    .hi-contrast { --bg: var(--hi-contrast-bg); --fg: var(--hi-contrast-fg); --panel: #000; --panel-border:#333; }
    .badge { padding: 2px 6px; background: #0b1220; border: 1px solid #1f2a44; border-radius: 999px; font-size: 12px; }
  </style>
</head>
<body>
  <div class="app" id="app">
    <header>
      <h1>呼吸ペーサー v1.0（デスクトップ検証用） <span id="sessionState" class="badge">IDLE</span></h1>
    </header>
    <div class="main">
      <div class="canvas-wrap">
        <canvas id="canvas"></canvas>
      </div>
      <div class="controls">
        <div class="row buttons">
          <button id="btnStartStop" class="btn primary">開始</button>
          <button id="btnMute" class="btn ghost">ミュート</button>
          <button id="btnFullscreen" class="btn ghost">画面占有</button>
        </div>
        <div class="group" id="modes">
          <h3>モード選択 (1–5)</h3>
          <div class="row">
            <button class="btn ghost" data-mode="M0">M0 日常安定化 4-0-6</button>
            <button class="btn ghost" data-mode="M1">M1 コヒーレント 5-0-5</button>
          </div>
          <div class="row">
            <button class="btn ghost" data-mode="M2">M2 ディープ 4-1-7</button>
            <button class="btn ghost" data-mode="M3">M3 ランプ 3-0-4→6</button>
            <button class="btn ghost" data-mode="M4">M4 微小ゆらぎ</button>
          </div>
        </div>
        <div class="group">
          <h3>スライダ</h3>
          <div>
            <label>BPM 5–9 <span id="lblBpm" class="status"></span></label>
            <input id="slBpm" type="range" min="5" max="9" step="0.1" />
          </div>
          <div>
            <label>可動振幅（画面比%）2.5–5 <span id="lblAmp" class="status"></span></label>
            <input id="slAmp" type="range" min="2.5" max="5" step="0.1" />
          </div>
          <div>
            <label>音量（dBFS） -48〜-24 <span id="lblVol" class="status"></span></label>
            <input id="slVol" type="range" min="-48" max="-24" step="1" />
          </div>
        </div>
        <div class="group">
          <h3>トグル</h3>
          <div class="row">
            <button id="tgRamp" class="btn ghost">ランプイン ON</button>
            <button id="tgJitter" class="btn ghost">微小ゆらぎ ON</button>
          </div>
          <div class="row">
            <button id="tgAuto" class="btn ghost">自動セッション ON</button>
            <button id="tgTheme" class="btn ghost">高コントラスト OFF</button>
          </div>
          <div class="row">
            <button id="tgVisual" class="btn ghost">表示: オーブ</button>
            <button id="tgMotion" class="btn ghost">動き: 上下</button>
          </div>
        </div>
        <div class="group">
          <h3>スケジューラ</h3>
          <div class="kv">
            <div>次回まで:</div><div id="lblNext">--:--</div>
            <div>残り時間:</div><div id="lblRemain">--:--</div>
            <div>間隔(分):</div><div><input id="inInterval" type="number" min="25" max="40" step="1" style="width:80px"> </div>
            <div>長さ(秒):</div><div><input id="inDuration" type="number" min="60" max="120" step="5" style="width:80px"> </div>
          </div>
          <div class="row">
            <button id="btnSkip" class="btn">スキップ</button>
          </div>
        </div>
        <div class="group">
          <h3>ログ/設定</h3>
          <div class="row">
            <button id="btnExportCsv" class="btn">CSVエクスポート</button>
            <button id="btnReset" class="btn warn">設定初期化</button>
          </div>
          <div class="hint">Space:開始/停止, 1–5:モード, ↑↓:BPM, M:ミュート, F:全画面</div>
        </div>
      </div>
    </div>
    <footer class="footer">
      <div>
        <span>状態:</span> <span id="lblStatus" class="status">準備中</span>
      </div>
      <div>
        <span id="lblMode" class="badge">M0</span>
        <span id="lblProfile" class="badge">吸4/保0/吐6</span>
        <span id="lblEffectiveBpm" class="badge">6.0 BPM</span>
      </div>
    </footer>
  </div>

  <script>
  // --- Utilities ---
  const clamp = (x, a, b) => Math.min(b, Math.max(a, x));
  const lerp = (a, b, t) => a + (b - a) * t;
  const mix = (a, b, t) => a + (b - a) * t;
  const toLinear = (db) => Math.pow(10, db / 20);
  const fmt1 = (x) => x.toFixed(1);
  const nowSec = () => performance.now() / 1000;

  // Minimum-jerk quintic ease-in-out from 0..1
  function minimumJerk(s) { // s in [0,1]
    return 10 * s**3 - 15 * s**4 + 6 * s**5;
  }

  // Low frequency noise via sum of two sines in 0.02–0.05 Hz
  function makeLFNoise() {
    const f1 = 0.02 + Math.random() * 0.03; // 0.02..0.05
    const f2 = 0.02 + Math.random() * 0.03;
    const p1 = Math.random() * Math.PI * 2;
    const p2 = Math.random() * Math.PI * 2;
    return (t) => ((Math.sin(2*Math.PI*f1*t + p1) + Math.sin(2*Math.PI*f2*t + p2)) * 0.5);
  }

  // --- Default Settings ---
  const DEFAULT_SETTINGS = {
    mode: 'M0',
    bpm: 6.0,
    inhale: 4.0,
    hold: 0.0,
    exhale: 6.0,
    ramp: { enabled: true, durationSec: 75, startBpm: 9.0, targetBpm: 6.0 },
    microJitter: { enabled: true, periodHz: 0.03, depthPct: 0.02 },
    amplitudePct: 0.03,
    audio: { enabled: true, masterDb: -36, toneHz: 300, lpfHz: 1000 },
    scheduler: { auto: true, intervalMin: 30, sessionSec: 90 },
    theme: 'dark',
    visual: { kind: 'orb', motion: 'y' }, // kind: 'orb' | 'bar', motion: 'y' | 'radius'
  };

  // Persistence
  function loadSettings() {
    try {
      const s = localStorage.getItem('breath_settings');
      if (!s) return { ...DEFAULT_SETTINGS };
      const obj = JSON.parse(s);
      return { ...DEFAULT_SETTINGS, ...obj, ramp: { ...DEFAULT_SETTINGS.ramp, ...(obj.ramp||{}) }, microJitter: { ...DEFAULT_SETTINGS.microJitter, ...(obj.microJitter||{}) }, audio: { ...DEFAULT_SETTINGS.audio, ...(obj.audio||{}) }, scheduler: { ...DEFAULT_SETTINGS.scheduler, ...(obj.scheduler||{}) }, visual: { ...DEFAULT_SETTINGS.visual, ...(obj.visual||{}) } };
    } catch (e) { console.warn(e); return { ...DEFAULT_SETTINGS }; }
  }
  function saveSettings() {
    localStorage.setItem('breath_settings', JSON.stringify(settings));
